name: 🌊 DeepBlue Cursor AI Platform CI/CD 🚢

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend Tests
  test-frontend:
    name: 🎨 Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔍 Lint code
        run: npm run lint
      
      - name: 🔧 Type check
        run: npm run type-check
      
      - name: 🧪 Run tests
        run: npm run test:coverage
      
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend

  # Backend Tests
  test-backend:
    name: ⚙️ Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🗄️ Setup database
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
      
      - name: 🔍 Lint code
        run: npm run lint
      
      - name: 🔧 Type check
        run: npm run type-check
      
      - name: 🧪 Run tests
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
      
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          flags: backend

  # Build and Test Docker Images
  build-docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
      
      - name: 🏗️ Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🏗️ Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [build-docker]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
      
      - name: 🔍 Run Trivy vulnerability scanner for backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
      
      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-frontend-results.sarif'
      
      - name: 📊 Upload Trivy scan results for backend
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🚀 Deploy to staging
        run: |
          echo "🌊 Deploying to staging environment 🚢"
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/

  # Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🚀 Deploy to production
        run: |
          echo "🌊 Deploying to production environment 🚢"
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
      
      - name: 📢 Notify deployment
        run: |
          echo "🌊 DeepBlue Cursor AI Platform deployed successfully! 🚢"
          # Add notification logic here (Slack, Discord, etc.)

  # Performance Tests
  performance-test:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📊 Run performance tests
        run: |
          echo "🌊 Running performance tests 🚢"
          # Add performance testing commands here
          # Example: artillery run tests/load-test.yml
